{"name": "Проверка выхода из аккаунта", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/account\">...</a> is not clickable at point (904, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=130.0.6723.92)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B11E3AF5+28005]\n\t(No symbol) [0x00007FF6B11483F0]\n\t(No symbol) [0x00007FF6B0FE580A]\n\t(No symbol) [0x00007FF6B103D6CE]\n\t(No symbol) [0x00007FF6B103B16C]\n\t(No symbol) [0x00007FF6B1038628]\n\t(No symbol) [0x00007FF6B103785D]\n\t(No symbol) [0x00007FF6B102990E]\n\t(No symbol) [0x00007FF6B105BA3A]\n\t(No symbol) [0x00007FF6B1029246]\n\t(No symbol) [0x00007FF6B105BC50]\n\t(No symbol) [0x00007FF6B107B8B3]\n\t(No symbol) [0x00007FF6B105B7E3]\n\t(No symbol) [0x00007FF6B10275C8]\n\t(No symbol) [0x00007FF6B1028731]\n\tGetHandleVerifier [0x00007FF6B14D646D+3118813]\n\tGetHandleVerifier [0x00007FF6B1526CC0+3448624]\n\tGetHandleVerifier [0x00007FF6B151CF3D+3408301]\n\tGetHandleVerifier [0x00007FF6B12AA44B+841403]\n\t(No symbol) [0x00007FF6B115344F]\n\t(No symbol) [0x00007FF6B114F4C4]\n\t(No symbol) [0x00007FF6B114F65D]\n\t(No symbol) [0x00007FF6B113EBB9]\n\tBaseThreadInitThunk [0x00007FF8A0457374+20]\n\tRtlUserThreadStart [0x00007FF8A059CC91+33]", "trace": "self = <tests.test_profile.TestProfilePage object at 0x000001AD10EC9FD0>, main_page = <pages.main_page.MainPage object at 0x000001AD10F507D0>, profile_page = <pages.profile_page.ProfilePage object at 0x000001AD10F5E0D0>\nauthorize_user = None\n\n    @allure.title('Проверка выхода из аккаунта')\n    def test_logout(self, main_page, profile_page, authorize_user):\n        main_page.open_page(Urls.MAIN_PAGE_URL)\n>       main_page.click_profile_link()\n\ntests\\test_profile.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:13: in click_profile_link\n    self.click_element(HeaderLocators.PROFILE_LINK)\npages\\base_page.py:25: in click_element\n    self.find_and_wait_element(locator).click()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AD10F44090>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6B113EBB9]\\\\n\\\\tBaseThreadInitThunk [0x00007FF8A0457374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8A059CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/account\">...</a> is not clickable at point (904, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=130.0.6723.92)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6B11E3AF5+28005]\nE       \t(No symbol) [0x00007FF6B11483F0]\nE       \t(No symbol) [0x00007FF6B0FE580A]\nE       \t(No symbol) [0x00007FF6B103D6CE]\nE       \t(No symbol) [0x00007FF6B103B16C]\nE       \t(No symbol) [0x00007FF6B1038628]\nE       \t(No symbol) [0x00007FF6B103785D]\nE       \t(No symbol) [0x00007FF6B102990E]\nE       \t(No symbol) [0x00007FF6B105BA3A]\nE       \t(No symbol) [0x00007FF6B1029246]\nE       \t(No symbol) [0x00007FF6B105BC50]\nE       \t(No symbol) [0x00007FF6B107B8B3]\nE       \t(No symbol) [0x00007FF6B105B7E3]\nE       \t(No symbol) [0x00007FF6B10275C8]\nE       \t(No symbol) [0x00007FF6B1028731]\nE       \tGetHandleVerifier [0x00007FF6B14D646D+3118813]\nE       \tGetHandleVerifier [0x00007FF6B1526CC0+3448624]\nE       \tGetHandleVerifier [0x00007FF6B151CF3D+3408301]\nE       \tGetHandleVerifier [0x00007FF6B12AA44B+841403]\nE       \t(No symbol) [0x00007FF6B115344F]\nE       \t(No symbol) [0x00007FF6B114F4C4]\nE       \t(No symbol) [0x00007FF6B114F65D]\nE       \t(No symbol) [0x00007FF6B113EBB9]\nE       \tBaseThreadInitThunk [0x00007FF8A0457374+20]\nE       \tRtlUserThreadStart [0x00007FF8A059CC91+33]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Нажимаем на кнопку Личный кабинет", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"AppHeader_header__link__3D_hX\" href=\"/account\">...</a> is not clickable at point (904, 44). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=130.0.6723.92)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6B11E3AF5+28005]\n\t(No symbol) [0x00007FF6B11483F0]\n\t(No symbol) [0x00007FF6B0FE580A]\n\t(No symbol) [0x00007FF6B103D6CE]\n\t(No symbol) [0x00007FF6B103B16C]\n\t(No symbol) [0x00007FF6B1038628]\n\t(No symbol) [0x00007FF6B103785D]\n\t(No symbol) [0x00007FF6B102990E]\n\t(No symbol) [0x00007FF6B105BA3A]\n\t(No symbol) [0x00007FF6B1029246]\n\t(No symbol) [0x00007FF6B105BC50]\n\t(No symbol) [0x00007FF6B107B8B3]\n\t(No symbol) [0x00007FF6B105B7E3]\n\t(No symbol) [0x00007FF6B10275C8]\n\t(No symbol) [0x00007FF6B1028731]\n\tGetHandleVerifier [0x00007FF6B14D646D+3118813]\n\tGetHandleVerifier [0x00007FF6B1526CC0+3448624]\n\tGetHandleVerifier [0x00007FF6B151CF3D+3408301]\n\tGetHandleVerifier [0x00007FF6B12AA44B+841403]\n\t(No symbol) [0x00007FF6B115344F]\n\t(No symbol) [0x00007FF6B114F4C4]\n\t(No symbol) [0x00007FF6B114F65D]\n\t(No symbol) [0x00007FF6B113EBB9]\n\tBaseThreadInitThunk [0x00007FF8A0457374+20]\n\tRtlUserThreadStart [0x00007FF8A059CC91+33]\n\n", "trace": "  File \"D:\\Python\\Yandex_Practicum\\Diplom_3\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\Python\\Yandex_Practicum\\Diplom_3\\pages\\main_page.py\", line 13, in click_profile_link\n    self.click_element(HeaderLocators.PROFILE_LINK)\n  File \"D:\\Python\\Yandex_Practicum\\Diplom_3\\pages\\base_page.py\", line 25, in click_element\n    self.find_and_wait_element(locator).click()\n  File \"D:\\Python\\Yandex_Practicum\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"D:\\Python\\Yandex_Practicum\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Python\\Yandex_Practicum\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"D:\\Python\\Yandex_Practicum\\Diplom_3\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1730633765868, "stop": 1730633767005}], "start": 1730633765719, "stop": 1730633767184, "uuid": "ef1a1406-49ee-4c8f-adbc-fced51cbcd02", "historyId": "4a5a837107796c4b6a2797973ccb5762", "testCaseId": "4a5a837107796c4b6a2797973ccb5762", "fullName": "tests.test_profile.TestProfilePage#test_logout", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_profile"}, {"name": "subSuite", "value": "TestProfilePage"}, {"name": "host", "value": "Home-PC"}, {"name": "thread", "value": "10132-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_profile"}]}